{"remainingRequest":"/home/ashaban/vmmc/node_modules/babel-loader/lib/index.js!/home/ashaban/vmmc/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ashaban/vmmc/src/components/Game/Question.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ashaban/vmmc/src/components/Game/Question.vue","mtime":1536819856824},{"path":"/home/ashaban/vmmc/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/ashaban/vmmc/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/ashaban/vmmc/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { eventBus } from \"../../main\";\nimport { module1 } from \"../modules/module1.js\";\nexport default {\n  data: function data() {\n    return {\n      question: \"\",\n      choices: [],\n      gameRunning: false,\n      nextQuestion: null,\n      prevQuestion: null,\n      client: \"\",\n      questionNumber: 1,\n      selectedChoice: {},\n      selectedIndex: \"\",\n      accummulatedPoints: 0,\n      selectedAnswers: {\n        clientA: {},\n        clientB: {},\n        clientC: {}\n      },\n      mood: \"interested\",\n      moodClass: \"meter_arrow_interested\",\n      moods: [\"unhappy\", \"unsure\", \"neutral\", \"interested\", \"satisfied\"]\n    };\n  },\n  methods: {\n    choiceSelected: function choiceSelected(index) {\n      //ensure that an answer is not changed\n      if (this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n        index = this.selectedAnswers[this.client][this.questionNumber - 1];\n      }\n\n      this.selectedChoice = this.choices[index];\n      this.selectedIndex = index;\n      this.$refs[index][0].className = \"flex selectedChoice\";\n\n      for (var k in this.choices) {\n        k = parseInt(k);\n\n        if (k === index) {\n          continue;\n        }\n\n        this.$refs[k][0].className = \"flex choices\";\n      }\n    },\n    changeMood: function changeMood(marks) {\n      var moodIndex = this.moods.indexOf(this.mood);\n      moodIndex += marks;\n\n      if (this.moods[moodIndex] === undefined) {\n        if (moodIndex <= 0) {\n          this.mood = \"unhappy\";\n        } else {\n          this.mood = \"satisfied\";\n        }\n      } else {\n        this.mood = this.moods[moodIndex];\n      }\n\n      if (this.mood === \"satisfied\") {\n        this.moodClass = \"meter_arrow_satisfied\";\n      } else if (this.mood === \"interested\") {\n        this.moodClass = \"meter_arrow_interested\";\n      } else if (this.mood === \"neutral\") {\n        this.moodClass = \"meter_arrow_neutral\";\n      } else if (this.mood === \"unsure\") {\n        this.moodClass = \"meter_arrow_unsure\";\n      } else if (this.mood === \"unhappy\") {\n        this.moodClass = \"meter_arrow_unhappy\";\n      }\n    },\n    checkAnswer: function checkAnswer() {\n      if (Object.keys(this.selectedChoice).length === 0) {\n        this.$store.state.dialogError = true;\n        this.$store.state.errorTitle = \"Error\";\n        this.$store.state.errorDescription = \"Select an answer to proceed\";\n        return;\n      }\n\n      if (!this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n        this.selectedAnswers[this.client][this.questionNumber - 1] = this.selectedIndex;\n        var marks = parseInt(this.selectedChoice.impact);\n        this.accummulatedPoints += marks;\n        this.changeMood(marks);\n      }\n\n      this.selectedChoice = {};\n      this.loadNextQuestion();\n    },\n    loadPrevQuestion: function loadPrevQuestion() {\n      if (this.prevQuestion === null) {\n        return;\n      }\n\n      if (this.prevQuestion === \"clientA\" || this.prevQuestion === \"clientB\") {\n        this.client = this.prevQuestion;\n        this.prevQuestion = last(Object.keys(module1[this.client]));\n        this.questionNumber = this.prevQuestion++;\n      } else {\n        this.questionNumber--;\n      }\n\n      this.question = module1[this.client][this.prevQuestion].situationText;\n      this.choices = module1[this.client][this.prevQuestion].choices;\n      this.nextQuestion = module1[this.client][this.prevQuestion].nextMove;\n      this.prevQuestion = module1[this.client][this.prevQuestion].prevMove;\n\n      if (this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n        this.choiceSelected(this.selectedAnswers[this.client][this.questionNumber - 1]);\n      }\n    },\n    loadNextQuestion: function loadNextQuestion() {\n      if (!this.gameRunning || this.nextQuestion === \"clientB\" || this.nextQuestion === \"clientC\") {\n        this.questionNumber = 1;\n\n        if (!this.gameRunning) {\n          this.client = \"clientA\";\n          this.gameRunning = true;\n        } else {\n          this.client = this.nextQuestion;\n        }\n\n        this.nextQuestion = 0;\n      } else {\n        this.questionNumber++;\n      }\n\n      if (this.nextQuestion === null) {\n        this.$store.state.moduleProgress.completed = true;\n        this.$store.state.moduleProgress.module = 1;\n        this.prevQuestion = module1[this.client][this.nextQuestion].prevMove;\n      } else if (module1[this.client].hasOwnProperty(this.nextQuestion)) {\n        this.question = module1[this.client][this.nextQuestion].situationText;\n        this.choices = module1[this.client][this.nextQuestion].choices;\n        this.prevQuestion = module1[this.client][this.nextQuestion].prevMove;\n        this.nextQuestion = module1[this.client][this.nextQuestion].nextMove;\n      } // if an answer exist then highligh the answer\n\n\n      if (this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n        this.choiceSelected(this.selectedAnswers[this.client][this.questionNumber - 1]);\n      }\n\n      for (var k in this.choices) {\n        k = parseInt(k);\n\n        if (this.$refs[k] === undefined || this.selectedAnswers[this.client][this.questionNumber - 1] === k) {\n          continue;\n        }\n\n        this.$refs[k][0].className = \"flex choices\";\n      }\n    }\n  },\n  created: function created() {\n    this.loadNextQuestion();\n  }\n};",{"version":3,"sources":["Question.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\t<v-container>\n\t\t<template v-if=\"$store.state.moduleProgress.completed == true\">\n\t\t\t<v-alert type=\"info\" :value=\"true\">\n\t\t\t\t<b>Congratulations</b>\n\t\t\t\t<p>\n\t\t\t\t\tYou have finished this module\n\t\t\t\t</p>\n\t\t\t</v-alert>\n\t\t</template>\n\t\t<template v-else>\n\t\t\t<v-layout column>\n\t\t\t\t<v-flex>\n\t\t\t\t\t<center><b>A Serious Game</b></center>\n\t\t\t\t</v-flex>\n\t\t\t\t<v-flex id=\"question\" height=\"1\">\n\t\t\t\t\t<v-card class=\"scroll\" height=\"100\">\n\t\t\t\t\t\t<v-card-text>\n\t\t\t\t\t\t\t<v-layout>\n\t\t\t\t\t\t\t\t<v-flex xs1>\n\t\t\t\t\t\t\t\t\t{{questionNumber}}\t\n\t\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t\t<v-flex xs11 style=\"text-align:left\">\n\t\t\t\t\t\t\t\t\t{{question}}\n\t\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t</v-layout>\n\t\t\t\t\t\t</v-card-text>\n\t\t\t\t\t</v-card>\n\t\t\t\t</v-flex>\n\t\t\t\t<v-flex>\n\t\t\t\t\t<div id=\"answer\">\n\t\t\t\t<v-layout column>\n\t\t\t\t\t<template v-for=\"(choice,index) in choices\">\n\t\t\t\t\t\t<v-flex class=\"choices\" :ref='index' :key=\"index\" @click=\"choiceSelected(index)\">\n\t\t\t\t\t\t\t{{choice.choiceText}}\n\t\t\t\t\t\t</v-flex>\n\t\t\t\t</template>\n\t\t\t\t</v-layout>\n\t\t\t</div>\n\t\t\t\t</v-flex>\n\t\t\t</v-layout>\n\t\t\t<v-layout row wrap>\n\t\t\t\t<v-flex height=\"500px\">\n\t\t\t\t\t<v-layout row>\n\t\t\t\t\t\t<v-flex xs4>\n\t\t\t\t\t\t\t<v-icon large @click=\"checkAnswer()\" style=\"cursor:pointer\">fast_forward</v-icon>\n\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t<v-flex xs4>\n\t\t\t\t\t\t\t<div class=\"meter_box\" style=\"height:170px;width:450px\"></div>\n\t\t\t\t\t\t\t<div :class=\"[moodClass, 'meter_arrow']\" style=\"height:85px;width:400px\"></div>\n\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t<v-flex xs4>\n\t\t\t\t\t\t\t<v-icon large @click=\"loadPrevQuestion()\" style=\"cursor:pointer\">fast_rewind</v-icon>\n\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t</v-layout>\n\t\t\t\t</v-flex>\n\t\t\t</v-layout>\n\t\t</template>\n\t</v-container>\n</template>\n\n<script>\nimport { eventBus } from \"../../main\";\nimport { module1 } from \"../modules/module1.js\";\nexport default {\n  data() {\n    return {\n      question: \"\",\n      choices: [],\n      gameRunning: false,\n      nextQuestion: null,\n      prevQuestion: null,\n      client: \"\",\n      questionNumber: 1,\n      selectedChoice: {},\n      selectedIndex: \"\",\n      accummulatedPoints: 0,\n      selectedAnswers: {\n        clientA: {},\n        clientB: {},\n        clientC: {}\n      },\n      mood: \"interested\",\n      moodClass: \"meter_arrow_interested\",\n      moods: [\"unhappy\", \"unsure\", \"neutral\", \"interested\", \"satisfied\"]\n    };\n  },\n  methods: {\n    choiceSelected(index) {\n      //ensure that an answer is not changed\n      if (\n        this.selectedAnswers[this.client].hasOwnProperty([\n          this.questionNumber - 1\n        ])\n      ) {\n        index = this.selectedAnswers[this.client][this.questionNumber - 1];\n      }\n      this.selectedChoice = this.choices[index];\n      this.selectedIndex = index;\n      this.$refs[index][0].className = \"flex selectedChoice\";\n      for (let k in this.choices) {\n        k = parseInt(k);\n        if (k === index) {\n          continue;\n        }\n        this.$refs[k][0].className = \"flex choices\";\n      }\n    },\n    changeMood(marks) {\n      let moodIndex = this.moods.indexOf(this.mood);\n      moodIndex += marks;\n      if (this.moods[moodIndex] === undefined) {\n        if (moodIndex <= 0) {\n          this.mood = \"unhappy\";\n        } else {\n          this.mood = \"satisfied\";\n        }\n      } else {\n        this.mood = this.moods[moodIndex];\n      }\n      if (this.mood === \"satisfied\") {\n        this.moodClass = \"meter_arrow_satisfied\";\n      } else if (this.mood === \"interested\") {\n        this.moodClass = \"meter_arrow_interested\";\n      } else if (this.mood === \"neutral\") {\n        this.moodClass = \"meter_arrow_neutral\";\n      } else if (this.mood === \"unsure\") {\n        this.moodClass = \"meter_arrow_unsure\";\n      } else if (this.mood === \"unhappy\") {\n        this.moodClass = \"meter_arrow_unhappy\";\n      }\n    },\n    checkAnswer() {\n      if (Object.keys(this.selectedChoice).length === 0) {\n        this.$store.state.dialogError = true;\n        this.$store.state.errorTitle = \"Error\";\n        this.$store.state.errorDescription = \"Select an answer to proceed\";\n        return;\n      }\n      if (\n        !this.selectedAnswers[this.client].hasOwnProperty([\n          this.questionNumber - 1\n        ])\n      ) {\n        this.selectedAnswers[this.client][\n          this.questionNumber - 1\n        ] = this.selectedIndex;\n        let marks = parseInt(this.selectedChoice.impact);\n        this.accummulatedPoints += marks;\n        this.changeMood(marks);\n      }\n      this.selectedChoice = {};\n      this.loadNextQuestion();\n    },\n    loadPrevQuestion() {\n      if (this.prevQuestion === null) {\n        return;\n      }\n      if (this.prevQuestion === \"clientA\" || this.prevQuestion === \"clientB\") {\n        this.client = this.prevQuestion;\n        this.prevQuestion = last(Object.keys(module1[this.client]));\n        this.questionNumber = this.prevQuestion++;\n      } else {\n        this.questionNumber--;\n      }\n      this.question = module1[this.client][this.prevQuestion].situationText;\n      this.choices = module1[this.client][this.prevQuestion].choices;\n      this.nextQuestion = module1[this.client][this.prevQuestion].nextMove;\n      this.prevQuestion = module1[this.client][this.prevQuestion].prevMove;\n      if (\n        this.selectedAnswers[this.client].hasOwnProperty([\n          this.questionNumber - 1\n        ])\n      ) {\n        this.choiceSelected(\n          this.selectedAnswers[this.client][this.questionNumber - 1]\n        );\n      }\n    },\n    loadNextQuestion() {\n      if (\n        !this.gameRunning ||\n        this.nextQuestion === \"clientB\" ||\n        this.nextQuestion === \"clientC\"\n      ) {\n        this.questionNumber = 1;\n        if (!this.gameRunning) {\n          this.client = \"clientA\";\n          this.gameRunning = true;\n        } else {\n          this.client = this.nextQuestion;\n        }\n        this.nextQuestion = 0;\n      } else {\n        this.questionNumber++;\n      }\n\n      if (this.nextQuestion === null) {\n        this.$store.state.moduleProgress.completed = true;\n        this.$store.state.moduleProgress.module = 1;\n        this.prevQuestion = module1[this.client][this.nextQuestion].prevMove;\n      } else if (module1[this.client].hasOwnProperty(this.nextQuestion)) {\n        this.question = module1[this.client][this.nextQuestion].situationText;\n        this.choices = module1[this.client][this.nextQuestion].choices;\n        this.prevQuestion = module1[this.client][this.nextQuestion].prevMove;\n        this.nextQuestion = module1[this.client][this.nextQuestion].nextMove;\n      }\n\n      // if an answer exist then highligh the answer\n      if (\n        this.selectedAnswers[this.client].hasOwnProperty([\n          this.questionNumber - 1\n        ])\n      ) {\n        this.choiceSelected(\n          this.selectedAnswers[this.client][this.questionNumber - 1]\n        );\n      }\n      for (let k in this.choices) {\n        k = parseInt(k);\n        if (\n          this.$refs[k] === undefined ||\n          this.selectedAnswers[this.client][this.questionNumber - 1] === k\n        ) {\n          continue;\n        }\n        this.$refs[k][0].className = \"flex choices\";\n      }\n    }\n  },\n  created: function() {\n    this.loadNextQuestion();\n  }\n};\n</script>\n\n<style scoped>\n#question {\n  padding: 20px;\n}\n.choices {\n  cursor: pointer;\n  padding: 10px;\n  border-radius: 20px;\n  margin: 10px;\n  background-color: #7ce5f8;\n  text-align: left;\n}\n.choices:hover {\n  background-color: #3ead68;\n  color: white;\n}\n.selectedChoice {\n  background-color: #3ead68;\n  cursor: pointer;\n  padding: 10px;\n  border-radius: 20px;\n  margin: 10px;\n  color: white;\n  text-align: left;\n}\n.scroll {\n  overflow-y: auto;\n}\n.meter_box {\n  position: relative;\n  background-image: url(\"../../assets/images/meter_box.png\");\n  width: 1000;\n  height: 800;\n  right: 100px;\n}\n.meter_arrow {\n  display: inline-block;\n  position: relative;\n  background: url(\"../../assets/images/meter_arrow.png\") no-repeat;\n}\n.meter_arrow_satisfied {\n  bottom: -30px;\n  left: 90px;\n  transform: rotate(38deg);\n}\n.meter_arrow_interested {\n  bottom: 90px;\n  left: 100px;\n  transform: rotate(-5deg);\n}\n.meter_arrow_neutral {\n  bottom: 200px;\n  left: 24px;\n  transform: rotate(-49deg);\n}\n.meter_arrow_unsure {\n  bottom: 234px;\n  left: -117px;\n  transform: rotate(-103deg);\n}\n.meter_arrow_unhappy {\n  bottom: 170px;\n  left: -230px;\n  transform: rotate(-138deg);\n}\n</style>\n"],"sourceRoot":"src/components/Game"}]}
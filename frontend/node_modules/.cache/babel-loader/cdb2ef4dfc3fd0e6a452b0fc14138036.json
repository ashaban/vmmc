{"remainingRequest":"/home/ashaban/vmmc/node_modules/babel-loader/lib/index.js!/home/ashaban/vmmc/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ashaban/vmmc/src/components/Game/Module1.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ashaban/vmmc/src/components/Game/Module1.vue","mtime":1538115366728},{"path":"/home/ashaban/vmmc/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/ashaban/vmmc/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/ashaban/vmmc/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { eventBus } from '../../main';\nimport { module1 } from '../questions/module1.js';\nexport default {\n  data: function data() {\n    return {\n      question: '',\n      comment: '',\n      commentDialog: false,\n      choices: [],\n      gameRunning: false,\n      nextQuestion: null,\n      prevQuestion: null,\n      client: '',\n      questionNumber: 1,\n      selectedChoice: {},\n      selectedIndex: '',\n      accummulatedPoints: 0,\n      selectedAnswers: {\n        clientA: {},\n        clientB: {},\n        clientC: {}\n      },\n      clientsStatus: {\n        clientA: 'pending',\n        clientB: 'pending',\n        clientC: 'pending'\n      },\n      loadingNextClient: false,\n      waitingPercent: 0,\n      mood: 'interested',\n      moodClass: 'meter_arrow_interested',\n      moods: ['unhappy', 'unsure', 'neutral', 'interested', 'satisfied']\n    };\n  },\n  filters: {\n    formatClient: function formatClient(client) {\n      if (!client) {\n        return client;\n      }\n\n      var cltArr = client.split('client');\n\n      if (cltArr.length === 2) {\n        return 'Client ' + cltArr[1];\n      }\n\n      return client;\n    }\n  },\n  methods: {\n    choiceSelected: function choiceSelected(event, index) {\n      var _this = this;\n\n      // ensure that an answer is not changed\n      if (this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n        index = this.selectedAnswers[this.client][this.questionNumber - 1];\n      }\n\n      this.selectedChoice = this.choices[index];\n      this.selectedIndex = index;\n\n      var _loop = function _loop(_k) {\n        _k = parseInt(_k);\n\n        if (_k === index) {\n          // wait for the vuetify oncahnge event to be called first then reset\n          setTimeout(function () {\n            _this.$refs[_k][0].isActive = true;\n          }, 0);\n        } else {\n          // wait for the vuetify oncahnge event to be called first then reset\n          setTimeout(function () {\n            _this.$refs[_k][0].isActive = false;\n          }, 0);\n        }\n\n        k = _k;\n      };\n\n      for (var k in this.choices) {\n        _loop(k);\n      }\n    },\n    changeMood: function changeMood(marks) {\n      var moodIndex = this.moods.indexOf(this.mood);\n      moodIndex += marks;\n\n      if (this.moods[moodIndex] === undefined) {\n        if (moodIndex <= 0) {\n          this.mood = 'unhappy';\n        } else {\n          this.mood = 'satisfied';\n        }\n      } else {\n        this.mood = this.moods[moodIndex];\n      }\n\n      if (this.mood === 'satisfied') {\n        this.$store.state.mod1ClientsMood[this.client] = 'Satisfied';\n        this.moodClass = 'meter_arrow_satisfied';\n      } else if (this.mood === 'interested') {\n        this.$store.state.mod1ClientsMood[this.client] = 'Interested';\n        this.moodClass = 'meter_arrow_interested';\n      } else if (this.mood === 'neutral') {\n        this.$store.state.mod1ClientsMood[this.client] = 'Neutral';\n        this.moodClass = 'meter_arrow_neutral';\n      } else if (this.mood === 'unsure') {\n        this.$store.state.mod1ClientsMood[this.client] = 'Unsure';\n        this.moodClass = 'meter_arrow_unsure';\n      } else if (this.mood === 'unhappy') {\n        this.$store.state.mod1ClientsMood[this.client] = 'Unhappy';\n        this.moodClass = 'meter_arrow_unhappy';\n      }\n    },\n    checkAnswer: function checkAnswer() {\n      var _this2 = this;\n\n      if (Object.keys(this.selectedChoice).length === 0) {\n        this.$store.state.dialogError = true;\n        this.$store.state.errorTitle = 'Error';\n        this.$store.state.errorDescription = 'Select an answer to proceed';\n        return;\n      }\n\n      if (!this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n        // make sure player see meter movement before displaying dialog\n        setTimeout(function () {\n          _this2.commentDialog = true;\n        }, 250);\n        this.comment = this.selectedChoice.comment;\n        this.selectedAnswers[this.client][this.questionNumber - 1] = this.selectedIndex;\n        var marks = parseInt(this.selectedChoice.impact);\n        this.accummulatedPoints += marks;\n        this.changeMood(marks);\n      }\n\n      this.selectedChoice = {};\n      this.loadNextQuestion();\n    },\n    loadPrevQuestion: function loadPrevQuestion() {\n      if (this.prevQuestion === null) {\n        return;\n      }\n\n      if (this.prevQuestion === 'clientA' || this.prevQuestion === 'clientB') {\n        this.client = this.prevQuestion;\n        this.prevQuestion = last(Object.keys(module1[this.client]));\n        this.questionNumber = this.prevQuestion++;\n      } else {\n        this.questionNumber--;\n      }\n\n      this.question = module1[this.client][this.prevQuestion].situationText;\n      this.choices = module1[this.client][this.prevQuestion].choices;\n      this.nextQuestion = module1[this.client][this.prevQuestion].nextMove;\n      this.prevQuestion = module1[this.client][this.prevQuestion].prevMove;\n\n      if (this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n        this.choiceSelected(this.selectedAnswers[this.client][this.questionNumber - 1]);\n      }\n    },\n    loadNextQuestion: function loadNextQuestion() {\n      var _this3 = this;\n\n      if (!this.gameRunning || this.nextQuestion === 'clientB' || this.nextQuestion === 'clientC') {\n        this.questionNumber = 1;\n\n        if (!this.gameRunning) {\n          this.client = 'clientA';\n          this.$store.state.moduleProgress.one.status = 'on-progress';\n          this.gameRunning = true;\n        } else {\n          this.client = this.nextQuestion;\n\n          if (this.client === 'clientB') {\n            this.clientsStatus.clientA = 'done';\n          } else if (this.client === 'clientC') {\n            this.clientsStatus.clientB = 'done';\n          }\n\n          this.mood = 'interested';\n          this.loadingNextClient = true;\n          var intervalObj = setInterval(function () {\n            _this3.waitingPercent++;\n\n            if (_this3.waitingPercent === 100) {\n              _this3.loadingNextClient = false;\n\n              _this3.changeMood(0);\n\n              clearInterval(intervalObj);\n              _this3.waitingPercent = 0;\n            }\n          }, 100);\n        }\n\n        this.$store.state.mod1ClientsMood[this.client] = 'Interested';\n        this.nextQuestion = 0;\n      } else {\n        this.questionNumber++;\n      }\n\n      if (this.nextQuestion === null) {\n        this.clientsStatus.clientC = 'done';\n        this.$store.state.moduleProgress.one.status = 'done';\n        this.questionNumber--;\n        this.gameRunning = false; // this.prevQuestion = module1[this.client][this.nextQuestion].prevMove;\n      } else if (module1[this.client].hasOwnProperty(this.nextQuestion)) {\n        this.question = module1[this.client][this.nextQuestion].situationText;\n        this.choices = module1[this.client][this.nextQuestion].choices;\n        this.prevQuestion = module1[this.client][this.nextQuestion].prevMove;\n        this.nextQuestion = module1[this.client][this.nextQuestion].nextMove;\n      } // if an answer exist then highligh the answer\n\n\n      if (this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n        this.choiceSelected(this.selectedAnswers[this.client][this.questionNumber - 1]);\n      }\n\n      for (var _k2 in this.choices) {\n        _k2 = parseInt(_k2);\n\n        if (this.$refs[_k2] === undefined || this.selectedAnswers[this.client][this.questionNumber - 1] === _k2) {\n          continue;\n        }\n\n        this.$refs[_k2][0].isActive = false;\n      }\n    }\n  },\n  created: function created() {\n    this.loadNextQuestion();\n  }\n};",{"version":3,"sources":["Module1.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\t<v-container>\n    <v-dialog persistent v-model=\"commentDialog\" max-width=\"500px\">\n\t\t\t<v-card>\n\t\t\t\t<v-toolbar color=\"primary\" dark>\n\t\t\t\t\t<v-toolbar-title>\n\t\t\t\t\t\tComment\n\t\t\t\t\t</v-toolbar-title>\n\t\t\t\t</v-toolbar>\n\t\t\t\t<v-card-text>\n\t\t\t\t\t{{comment}}\n\t\t\t\t</v-card-text>\n\t\t\t\t<v-card-actions>\n\t\t\t\t\t<v-btn color=\"primary\" @click.native=\"commentDialog = false\">Ok</v-btn>\n\t\t\t\t</v-card-actions>\n\t\t\t</v-card>\n\t\t</v-dialog>\n    <v-alert type=\"info\" :value=\"true\" v-if=\"$store.state.moduleProgress.one.status === 'done'\">\n      <b>Congratulations</b>\n      <p>\n        You have Completed Module 1\n      </p>\n    </v-alert>\n\t\t<template>\n\t\t\t<v-layout column>\n\t\t\t\t<v-flex>\n\t\t\t\t\t<v-toolbar color=\"#566573\">\n\t\t\t\t\t\t<v-layout row wrap>\n\t\t\t\t\t\t\t<v-flex xs4 text-sm-left style=\"color:white\">\n\t\t\t\t\t\t\t\t<b>MALE CIRCUMCISION CHALLENGE</b>\n\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t<v-spacer></v-spacer>\n\t\t\t\t\t\t\t<v-flex xs1 text-sm-right style=\"color:white\">\n\t\t\t\t\t\t\t\t<b>MODULE 1</b>\n\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t</v-layout>\n\t\t\t\t\t</v-toolbar>\n\t\t\t\t</v-flex>\n\t\t\t\t<v-flex id=\"question\" v-show='loadingNextClient'>\n\t\t\t\t\t{{client | formatClient}} Coming Now<v-progress-linear v-model=\"waitingPercent\" color=\"primary\" class=\"mb-0\"></v-progress-linear>\n\t\t\t\t</v-flex>\n\t\t\t\t<v-flex id=\"question\" height=\"1\" v-show='!loadingNextClient' text-sm-left>\n\t\t\t\t\t<b>{{client | formatClient}}</b>\n\t\t\t\t\t<v-card class=\"scroll\" height=\"200\">\n\t\t\t\t\t\t<v-card-text>\n\t\t\t\t\t\t\t<v-layout column>\n\t\t\t\t\t\t\t\t<v-flex>\n\t\t\t\t\t\t\t\t\t<v-layout>\n\t\t\t\t\t\t\t\t\t\t<v-flex xs1>\n\t\t\t\t\t\t\t\t\t\t\t{{questionNumber}}\n\t\t\t\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t\t\t\t<v-flex xs11 style=\"text-align:left\">\n\t\t\t\t\t\t\t\t\t\t\t{{question}}\n\t\t\t\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t\t\t</v-layout>\n\t\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t\t<v-flex>\n\t\t\t\t\t\t\t\t\t<div id=\"answer\">\n\t\t\t\t\t\t\t\t\t\t<v-layout column>\n\t\t\t\t\t\t\t\t\t\t\t<template v-for=\"(choice,index) in choices\">\n\t\t\t\t\t\t\t\t\t\t\t\t<v-radio-group v-model=\"selectedIndex\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<label style=\"cursor: pointer;\" @click=\"choiceSelected($event, index)\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<v-radio :key=\"index\" :ref='index' :value=\"index\" style=\"font-weight: bold;color: black\" :label=\"choice.choiceText\" color=\"red\"></v-radio>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t</v-radio-group>\n\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t</v-layout>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t</v-layout>\n\t\t\t\t\t\t</v-card-text>\n\t\t\t\t\t</v-card>\n\t\t\t\t</v-flex>\n\t\t\t</v-layout>\n\t\t\t<br><br>\n\t\t\t<v-layout row wrap>\n\t\t\t\t<v-flex height=\"500px\" style=\"background-color: white\">\n\t\t\t\t\t<v-layout row>\n\t\t\t\t\t\t<v-flex xs4 text-sm-left style=\"margin-top:140px\">\n              <label @click=\"loadPrevQuestion()\" style=\"cursor:pointer\">\n                <img src=\"../../assets/images/prev.png\">\n                BACK\n              </label>\n\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t<v-flex xs4>\n\t\t\t\t\t\t\t<div class=\"meter_box\" style=\"height:170px;width:450px\"></div>\n\t\t\t\t\t\t\t<div :class=\"[moodClass, 'meter_arrow']\" style=\"height:85px;width:400px\"></div>\n\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t<v-flex xs4 text-sm-right style=\"margin-top:140px\">\n              <label @click=\"checkAnswer()\" style=\"cursor:pointer\">\n                NEXT<img src=\"../../assets/images/next.png\">\n              </label>\n\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t</v-layout>\n\t\t\t\t</v-flex>\n\t\t\t</v-layout>\n\t\t</template>\n    <v-layout column>\n      <v-flex>\n        <v-toolbar color=\"primary\">\n          <v-layout row wrap>\n            <v-flex xs3 style=\"color: white\" text-sm-left v-if=\"clientsStatus.clientA === 'done'\">\n              Client A: <label class='clientMoodStatus'>{{$store.state.mod1ClientsMood.clientA}}</label>\n            </v-flex>\n            <v-flex xs3 style=\"color: white\" text-xs-center v-if=\"clientsStatus.clientB === 'done'\">\n              Client B: <label class='clientMoodStatus'>{{$store.state.mod1ClientsMood.clientB}}</label>\n            </v-flex>\n            <v-flex xs3 style=\"color: white\" text-sm-right v-if=\"clientsStatus.clientC === 'done'\">\n              Client C: <label class='clientMoodStatus'>{{$store.state.mod1ClientsMood.clientC}}</label>\n            </v-flex>\n            <v-flex xs3 style=\"position: absolute; right: 0; bottom: 10px\">\n              <v-btn to='/'><v-icon left>home</v-icon>Home</v-btn>\n            </v-flex>\n          </v-layout>\n        </v-toolbar>\n      </v-flex>\n    </v-layout>\n\t</v-container>\n</template>\n\n<script>\nimport { eventBus } from '../../main'\nimport { module1 } from '../questions/module1.js'\nexport default {\n\tdata () {\n\t\treturn {\n\t\t\tquestion: '',\n\t\t\tcomment: '',\n\t\t\tcommentDialog: false,\n\t\t\tchoices: [],\n\t\t\tgameRunning: false,\n\t\t\tnextQuestion: null,\n\t\t\tprevQuestion: null,\n\t\t\tclient: '',\n\t\t\tquestionNumber: 1,\n\t\t\tselectedChoice: {},\n\t\t\tselectedIndex: '',\n\t\t\taccummulatedPoints: 0,\n\t\t\tselectedAnswers: {\n\t\t\t\tclientA: {},\n\t\t\t\tclientB: {},\n\t\t\t\tclientC: {}\n\t\t\t},\n\t\t\tclientsStatus: {\n\t\t\t\tclientA: 'pending',\n\t\t\t\tclientB: 'pending',\n\t\t\t\tclientC: 'pending'\n\t\t\t},\n\t\t\tloadingNextClient: false,\n\t\t\twaitingPercent: 0,\n\t\t\tmood: 'interested',\n\t\t\tmoodClass: 'meter_arrow_interested',\n\t\t\tmoods: ['unhappy', 'unsure', 'neutral', 'interested', 'satisfied']\n\t\t}\n\t},\n\tfilters: {\n\t\tformatClient (client) {\n\t\t\tif (!client) {\n\t\t\t\treturn client\n\t\t\t}\n\t\t\tlet cltArr = client.split('client')\n\t\t\tif (cltArr.length === 2) {\n\t\t\t\treturn 'Client ' + cltArr[1]\n\t\t\t}\n\t\t\treturn client\n\t\t}\n\t},\n\tmethods: {\n\t\tchoiceSelected (event, index) {\n\t\t\t// ensure that an answer is not changed\n\t\t\tif (this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n\t\t\t\tindex = this.selectedAnswers[this.client][this.questionNumber - 1]\n\t\t\t}\n\t\t\tthis.selectedChoice = this.choices[index]\n\t\t\tthis.selectedIndex = index\n\t\t\tfor (let k in this.choices) {\n\t\t\t\tk = parseInt(k)\n\t\t\t\tif (k === index) {\n\t\t\t\t\t// wait for the vuetify oncahnge event to be called first then reset\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.$refs[k][0].isActive = true\n\t\t\t\t\t}, 0)\n\t\t\t\t} else {\n\t\t\t\t\t// wait for the vuetify oncahnge event to be called first then reset\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.$refs[k][0].isActive = false\n\t\t\t\t\t}, 0)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tchangeMood (marks) {\n\t\t\tlet moodIndex = this.moods.indexOf(this.mood)\n\t\t\tmoodIndex += marks\n\t\t\tif (this.moods[moodIndex] === undefined) {\n\t\t\t\tif (moodIndex <= 0) {\n\t\t\t\t\tthis.mood = 'unhappy'\n\t\t\t\t} else {\n\t\t\t\t\tthis.mood = 'satisfied'\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.mood = this.moods[moodIndex]\n\t\t\t}\n\t\t\tif (this.mood === 'satisfied') {\n\t\t\t\tthis.$store.state.mod1ClientsMood[this.client] = 'Satisfied'\n\t\t\t\tthis.moodClass = 'meter_arrow_satisfied'\n\t\t\t} else if (this.mood === 'interested') {\n\t\t\t\tthis.$store.state.mod1ClientsMood[this.client] = 'Interested'\n\t\t\t\tthis.moodClass = 'meter_arrow_interested'\n\t\t\t} else if (this.mood === 'neutral') {\n\t\t\t\tthis.$store.state.mod1ClientsMood[this.client] = 'Neutral'\n\t\t\t\tthis.moodClass = 'meter_arrow_neutral'\n\t\t\t} else if (this.mood === 'unsure') {\n\t\t\t\tthis.$store.state.mod1ClientsMood[this.client] = 'Unsure'\n\t\t\t\tthis.moodClass = 'meter_arrow_unsure'\n\t\t\t} else if (this.mood === 'unhappy') {\n\t\t\t\tthis.$store.state.mod1ClientsMood[this.client] = 'Unhappy'\n\t\t\t\tthis.moodClass = 'meter_arrow_unhappy'\n\t\t\t}\n\t\t},\n\t\tcheckAnswer () {\n\t\t\tif (Object.keys(this.selectedChoice).length === 0) {\n\t\t\t\tthis.$store.state.dialogError = true\n\t\t\t\tthis.$store.state.errorTitle = 'Error'\n\t\t\t\tthis.$store.state.errorDescription = 'Select an answer to proceed'\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (!this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n\t\t\t\t// make sure player see meter movement before displaying dialog\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.commentDialog = true\n\t\t\t\t}, 250)\n\t\t\t\tthis.comment = this.selectedChoice.comment\n\t\t\t\tthis.selectedAnswers[this.client][this.questionNumber - 1] = this.selectedIndex\n\t\t\t\tlet marks = parseInt(this.selectedChoice.impact)\n\t\t\t\tthis.accummulatedPoints += marks\n\t\t\t\tthis.changeMood(marks)\n\t\t\t}\n\t\t\tthis.selectedChoice = {}\n\t\t\tthis.loadNextQuestion()\n\t\t},\n\t\tloadPrevQuestion () {\n\t\t\tif (this.prevQuestion === null) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (this.prevQuestion === 'clientA' || this.prevQuestion === 'clientB') {\n\t\t\t\tthis.client = this.prevQuestion\n\t\t\t\tthis.prevQuestion = last(Object.keys(module1[this.client]))\n\t\t\t\tthis.questionNumber = this.prevQuestion++\n\t\t\t} else {\n\t\t\t\tthis.questionNumber--\n\t\t\t}\n\t\t\tthis.question = module1[this.client][this.prevQuestion].situationText\n\t\t\tthis.choices = module1[this.client][this.prevQuestion].choices\n\t\t\tthis.nextQuestion = module1[this.client][this.prevQuestion].nextMove\n\t\t\tthis.prevQuestion = module1[this.client][this.prevQuestion].prevMove\n\t\t\tif (\n\t\t\t\tthis.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])\n\t\t\t) {\n\t\t\t\tthis.choiceSelected(this.selectedAnswers[this.client][this.questionNumber - 1])\n\t\t\t}\n\t\t},\n\t\tloadNextQuestion () {\n\t\t\tif (!this.gameRunning || this.nextQuestion === 'clientB' || this.nextQuestion === 'clientC') {\n\t\t\t\tthis.questionNumber = 1\n\t\t\t\tif (!this.gameRunning) {\n\t\t\t\t\tthis.client = 'clientA'\n\t\t\t\t\tthis.$store.state.moduleProgress.one.status = 'on-progress'\n\t\t\t\t\tthis.gameRunning = true\n\t\t\t\t} else {\n\t\t\t\t\tthis.client = this.nextQuestion\n\t\t\t\t\tif (this.client === 'clientB') {\n\t\t\t\t\t\tthis.clientsStatus.clientA = 'done'\n\t\t\t\t\t} else if (this.client === 'clientC') {\n\t\t\t\t\t\tthis.clientsStatus.clientB = 'done'\n\t\t\t\t\t}\n\t\t\t\t\tthis.mood = 'interested'\n\t\t\t\t\tthis.loadingNextClient = true\n\t\t\t\t\tlet intervalObj = setInterval(() => {\n\t\t\t\t\t\tthis.waitingPercent++\n\t\t\t\t\t\tif (this.waitingPercent === 100) {\n\t\t\t\t\t\t\tthis.loadingNextClient = false\n\t\t\t\t\t\t\tthis.changeMood(0)\n\t\t\t\t\t\t\tclearInterval(intervalObj)\n\t\t\t\t\t\t\tthis.waitingPercent = 0\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 100)\n\t\t\t\t}\n\t\t\t\tthis.$store.state.mod1ClientsMood[this.client] = 'Interested'\n\t\t\t\tthis.nextQuestion = 0\n\t\t\t} else {\n\t\t\t\tthis.questionNumber++\n\t\t\t}\n\n\t\t\tif (this.nextQuestion === null) {\n\t\t\t\tthis.clientsStatus.clientC = 'done'\n\t\t\t\tthis.$store.state.moduleProgress.one.status = 'done'\n\t\t\t\tthis.questionNumber--\n\t\t\t\tthis.gameRunning = false\n\t\t\t\t// this.prevQuestion = module1[this.client][this.nextQuestion].prevMove;\n\t\t\t} else if (module1[this.client].hasOwnProperty(this.nextQuestion)) {\n\t\t\t\tthis.question = module1[this.client][this.nextQuestion].situationText\n\t\t\t\tthis.choices = module1[this.client][this.nextQuestion].choices\n\t\t\t\tthis.prevQuestion = module1[this.client][this.nextQuestion].prevMove\n\t\t\t\tthis.nextQuestion = module1[this.client][this.nextQuestion].nextMove\n\t\t\t}\n\n\t\t\t// if an answer exist then highligh the answer\n\t\t\tif (this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n\t\t\t\tthis.choiceSelected(this.selectedAnswers[this.client][this.questionNumber - 1])\n\t\t\t}\n\t\t\tfor (let k in this.choices) {\n\t\t\t\tk = parseInt(k)\n\t\t\t\tif (this.$refs[k] === undefined || this.selectedAnswers[this.client][this.questionNumber - 1] === k) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tthis.$refs[k][0].isActive = false\n\t\t\t}\n\t\t}\n\t},\n\tcreated: function () {\n\t\tthis.loadNextQuestion()\n\t}\n}\n</script>\n\n<style scoped>\n#question {\n  padding: 20px 0px 20px;\n}\n#answer {\n\tpadding: 0px 70px;\n}\n.choices {\n  cursor: pointer;\n  padding: 10px;\n  border-radius: 20px;\n  margin: 10px;\n  background-color: #7ce5f8;\n  text-align: left;\n}\n.choices:hover {\n  background-color: #3ead68;\n  color: white;\n}\n.selectedChoice {\n  background-color: #3ead68;\n  cursor: pointer;\n  padding: 10px;\n  border-radius: 20px;\n  margin: 10px;\n  color: white;\n  text-align: left;\n}\n.clientMoodStatus {\n  font-weight: bold;\n}\n.scroll {\n  overflow-y: auto;\n}\n.meter_box {\n  position: relative;\n  background-image: url(\"../../assets/images/meter_box.png\");\n  width: 1000;\n  height: 800;\n  right: 100px;\n}\n.meter_arrow {\n  display: inline-block;\n  position: relative;\n  background: url(\"../../assets/images/meter_arrow.png\") no-repeat;\n}\n.meter_arrow_satisfied {\n  bottom: -30px;\n  left: 90px;\n  transform: rotate(38deg);\n}\n.meter_arrow_interested {\n  bottom: 90px;\n  left: 100px;\n  transform: rotate(-5deg);\n}\n.meter_arrow_neutral {\n  bottom: 200px;\n  left: 24px;\n  transform: rotate(-49deg);\n}\n.meter_arrow_unsure {\n  bottom: 234px;\n  left: -117px;\n  transform: rotate(-103deg);\n}\n.meter_arrow_unhappy {\n  bottom: 170px;\n  left: -230px;\n  transform: rotate(-138deg);\n}\n</style>\n"],"sourceRoot":"src/components/Game"}]}
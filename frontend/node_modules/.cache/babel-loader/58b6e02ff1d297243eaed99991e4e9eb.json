{"remainingRequest":"/home/ashaban/vmmc/node_modules/babel-loader/lib/index.js!/home/ashaban/vmmc/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ashaban/vmmc/src/components/Game/Module1.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ashaban/vmmc/src/components/Game/Module1.vue","mtime":1537195130223},{"path":"/home/ashaban/vmmc/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/ashaban/vmmc/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/ashaban/vmmc/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport { eventBus } from \"../../main\";\nimport { module1 } from \"../modules/module1.js\";\nimport FlipCountdown from 'vue2-flip-countdown';\nexport default {\n  data: function data() {\n    return {\n      gameDuration: 20,\n      countDown: '',\n      question: \"\",\n      choices: [],\n      gameRunning: false,\n      nextQuestion: null,\n      prevQuestion: null,\n      client: \"\",\n      questionNumber: 1,\n      selectedChoice: {},\n      selectedIndex: \"\",\n      accummulatedPoints: 0,\n      selectedAnswers: {\n        clientA: {},\n        clientB: {},\n        clientC: {}\n      },\n      clientsMood: {\n        clientA: null,\n        clientB: null,\n        clientC: null\n      },\n      loadingNextClient: false,\n      waitingPercent: 0,\n      mood: \"interested\",\n      moodClass: \"meter_arrow_interested\",\n      moods: [\"unhappy\", \"unsure\", \"neutral\", \"interested\", \"satisfied\"]\n    };\n  },\n  filters: {\n    formatClient: function formatClient(client) {\n      if (!client) {\n        return client;\n      }\n\n      var cltArr = client.split('client');\n\n      if (cltArr.length === 2) {\n        return 'Client ' + cltArr[1];\n      }\n\n      return client;\n    }\n  },\n  methods: {\n    choiceSelected: function choiceSelected(index) {\n      //ensure that an answer is not changed\n      if (this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n        index = this.selectedAnswers[this.client][this.questionNumber - 1];\n      }\n\n      this.selectedChoice = this.choices[index];\n      this.selectedIndex = index;\n      this.$refs[index][0].isActive = true;\n\n      for (var k in this.choices) {\n        k = parseInt(k);\n\n        if (k === index) {\n          continue;\n        }\n\n        this.$refs[k][0].isActive = false;\n      }\n    },\n    changeMood: function changeMood(marks) {\n      var moodIndex = this.moods.indexOf(this.mood);\n      moodIndex += marks;\n\n      if (this.moods[moodIndex] === undefined) {\n        if (moodIndex <= 0) {\n          this.mood = \"unhappy\";\n        } else {\n          this.mood = \"satisfied\";\n        }\n      } else {\n        this.mood = this.moods[moodIndex];\n      }\n\n      if (this.mood === \"satisfied\") {\n        this.clientsMood[this.client] = 'Satisfied';\n        this.moodClass = \"meter_arrow_satisfied\";\n      } else if (this.mood === \"interested\") {\n        this.clientsMood[this.client] = 'Interested';\n        this.moodClass = \"meter_arrow_interested\";\n      } else if (this.mood === \"neutral\") {\n        this.clientsMood[this.client] = 'Neutral';\n        this.moodClass = \"meter_arrow_neutral\";\n      } else if (this.mood === \"unsure\") {\n        this.clientsMood[this.client] = 'Unsure';\n        this.moodClass = \"meter_arrow_unsure\";\n      } else if (this.mood === \"unhappy\") {\n        this.clientsMood[this.client] = 'Unhappy';\n        this.moodClass = \"meter_arrow_unhappy\";\n      }\n    },\n    checkAnswer: function checkAnswer() {\n      if (Object.keys(this.selectedChoice).length === 0) {\n        this.$store.state.dialogError = true;\n        this.$store.state.errorTitle = \"Error\";\n        this.$store.state.errorDescription = \"Select an answer to proceed\";\n        return;\n      }\n\n      if (!this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n        this.selectedAnswers[this.client][this.questionNumber - 1] = this.selectedIndex;\n        var marks = parseInt(this.selectedChoice.impact);\n        this.accummulatedPoints += marks;\n        this.changeMood(marks);\n      }\n\n      this.selectedChoice = {};\n      this.loadNextQuestion();\n    },\n    loadPrevQuestion: function loadPrevQuestion() {\n      if (this.prevQuestion === null) {\n        return;\n      }\n\n      if (this.prevQuestion === \"clientA\" || this.prevQuestion === \"clientB\") {\n        this.client = this.prevQuestion;\n        this.prevQuestion = last(Object.keys(module1[this.client]));\n        this.questionNumber = this.prevQuestion++;\n      } else {\n        this.questionNumber--;\n      }\n\n      this.question = module1[this.client][this.prevQuestion].situationText;\n      this.choices = module1[this.client][this.prevQuestion].choices;\n      this.nextQuestion = module1[this.client][this.prevQuestion].nextMove;\n      this.prevQuestion = module1[this.client][this.prevQuestion].prevMove;\n\n      if (this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n        this.choiceSelected(this.selectedAnswers[this.client][this.questionNumber - 1]);\n      }\n    },\n    loadNextQuestion: function loadNextQuestion() {\n      var _this = this;\n\n      if (!this.gameRunning || this.nextQuestion === \"clientB\" || this.nextQuestion === \"clientC\") {\n        this.questionNumber = 1;\n\n        if (!this.gameRunning) {\n          this.client = \"clientA\";\n          this.gameRunning = true;\n        } else {\n          this.client = this.nextQuestion;\n          this.mood = 'interested';\n          this.loadingNextClient = true;\n          var intervalObj = setInterval(function () {\n            console.log(_this.waitingPercent);\n            _this.waitingPercent++;\n\n            if (_this.waitingPercent === 100) {\n              _this.loadingNextClient = false;\n\n              _this.changeMood(0);\n\n              clearInterval(intervalObj);\n              _this.waitingPercent = 0;\n            }\n          }, 100);\n        }\n\n        this.clientsMood[this.client] = 'Interested';\n        this.nextQuestion = 0;\n      } else {\n        this.questionNumber++;\n      }\n\n      if (this.nextQuestion === null) {\n        this.$store.state.moduleProgress.completed = true;\n        this.$store.state.moduleProgress.module = 1;\n        this.prevQuestion = module1[this.client][this.nextQuestion].prevMove;\n      } else if (module1[this.client].hasOwnProperty(this.nextQuestion)) {\n        this.question = module1[this.client][this.nextQuestion].situationText;\n        this.choices = module1[this.client][this.nextQuestion].choices;\n        this.prevQuestion = module1[this.client][this.nextQuestion].prevMove;\n        this.nextQuestion = module1[this.client][this.nextQuestion].nextMove;\n      } // if an answer exist then highligh the answer\n\n\n      if (this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n        this.choiceSelected(this.selectedAnswers[this.client][this.questionNumber - 1]);\n      }\n\n      for (var k in this.choices) {\n        k = parseInt(k);\n\n        if (this.$refs[k] === undefined || this.selectedAnswers[this.client][this.questionNumber - 1] === k) {\n          continue;\n        }\n\n        this.$refs[k][0].isActive = false;\n      }\n    }\n  },\n  created: function created() {\n    this.loadNextQuestion();\n    this.countDown = moment().add(this.gameDuration, 'minutes').format('YYYY-MM-DD HH:mm:ss');\n  },\n  components: {\n    FlipCountdown: FlipCountdown\n  }\n};",{"version":3,"sources":["Module1.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\t<v-container>\n\t\t<template v-if=\"$store.state.moduleProgress.completed == true\">\n\t\t\t<v-alert type=\"info\" :value=\"true\">\n\t\t\t\t<b>Congratulations</b>\n\t\t\t\t<p>\n\t\t\t\t\tYou have Completed Module 1\n\t\t\t\t</p>\n\t\t\t</v-alert>\n\t\t</template>\n\t\t<template v-else>\n\t\t\t<v-layout column>\n\t\t\t\t<v-flex>\n\t\t\t\t\t<v-toolbar color=\"#566573\">\n\t\t\t\t\t\t<v-layout row wrap>\n\t\t\t\t\t\t\t<v-flex xs4 text-sm-left style=\"color:white\">\n\t\t\t\t\t\t\t\t<b>MALE CIRCUMCISION CHALLENGE</b>\n\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t<v-spacer></v-spacer>\n\t\t\t\t\t\t\t<v-flex xs1 text-sm-right style=\"color:white\">\n\t\t\t\t\t\t\t\t<b>MODULE {{$store.state.moduleProgress.module}}</b>\n\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t</v-layout>\n\t\t\t\t\t</v-toolbar>\n\t\t\t\t</v-flex>\n\t\t\t\t<v-flex id='moduleIntro'>\n\t\t\t\t\tModule 1 presents three preoperative counseling scenarios with hypothetical clients.  Make choices about how you counsel certain clients, and try to end the counseling session with a well-informed client who agrees to undergo circumcision.\n\t\t\t\t</v-flex>\n\t\t\t\t<v-flex id=\"question\" v-if='loadingNextClient'>\n\t\t\t\t\t{{client | formatClient}} Comming Now<v-progress-linear v-model=\"waitingPercent\" color=\"primary\" class=\"mb-0\"></v-progress-linear>\n\t\t\t\t</v-flex>\n\t\t\t\t<v-flex id=\"question\" height=\"1\" v-else text-sm-left>\n\t\t\t\t\t<b>{{client | formatClient}}</b>\n\t\t\t\t\t<v-card class=\"scroll\" height=\"200\">\n\t\t\t\t\t\t<v-card-text>\n\t\t\t\t\t\t\t<v-layout column>\n\t\t\t\t\t\t\t\t<v-flex>\n\t\t\t\t\t\t\t\t\t<v-layout>\n\t\t\t\t\t\t\t\t\t\t<v-flex xs1>\n\t\t\t\t\t\t\t\t\t\t\t{{questionNumber}}\n\t\t\t\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t\t\t\t<v-flex xs11 style=\"text-align:left\">\n\t\t\t\t\t\t\t\t\t\t\t{{question}}\n\t\t\t\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t\t\t</v-layout>\n\t\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t\t<v-flex>\n\t\t\t\t\t\t\t\t\t<div id=\"answer\">\n\t\t\t\t\t\t\t\t\t\t<v-layout column>\n\t\t\t\t\t\t\t\t\t\t\t<template v-for=\"(choice,index) in choices\">\n\t\t\t\t\t\t\t\t\t\t\t\t<v-radio-group>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<label style=\"cursor: pointer;\" @click=\"choiceSelected(index)\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<v-radio :key=\"index\" style=\"font-weight: bold;color: black\" :label=\"choice.choiceText\" :value=\"index\" :ref='index' color=\"red\"></v-radio>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t</v-radio-group>\n\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t</v-layout>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t</v-layout>\n\t\t\t\t\t\t</v-card-text>\n\t\t\t\t\t</v-card>\n\t\t\t\t</v-flex>\n\t\t\t</v-layout>\n\t\t\t<br><br>\n\t\t\t<v-layout row wrap>\n\t\t\t\t<v-flex height=\"500px\" style=\"background-color: white\">\n\t\t\t\t\t<v-layout row>\n\t\t\t\t\t\t<v-flex xs4 text-sm-left style=\"margin-top:140px\">\n\t\t\t\t\t\t\t<label @click=\"loadPrevQuestion()\" style=\"cursor:pointer\"><v-icon>fast_rewind</v-icon>BACK</label>\n\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t<v-flex xs4>\n\t\t\t\t\t\t\t<div class=\"meter_box\" style=\"height:170px;width:450px\"></div>\n\t\t\t\t\t\t\t<div :class=\"[moodClass, 'meter_arrow']\" style=\"height:85px;width:400px\"></div>\n\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t<v-flex xs4 text-sm-right style=\"margin-top:140px\">\n\t\t\t\t\t\t\t<label style=\"cursor:pointer\" @click=\"checkAnswer()\"><v-icon>fast_forward</v-icon>NEXT</label>\n\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t</v-layout>\n\t\t\t\t</v-flex>\n\t\t\t</v-layout>\n\t\t\t<v-layout column>\n\t\t\t\t<v-flex>\n\t\t\t\t\t<v-toolbar color=\"primary\">\n\t\t\t\t\t\t<v-layout row wrap>\n\t\t\t\t\t\t\t<v-flex xs4 style=\"color: white\" text-sm-left>\n\t\t\t\t\t\t\t\tClient A: <label class='clientMoodStatus'>{{clientsMood.clientA}}</label>\n\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t<v-flex xs4 style=\"color: white\" text-xs-center v-if='clientsMood.clientB'>\n\t\t\t\t\t\t\t\tClient B: <label class='clientMoodStatus'>{{clientsMood.clientB}}</label>\n\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t<v-flex xs4 style=\"color: white\" text-sm-right v-if='clientsMood.clientC'>\n\t\t\t\t\t\t\t\tClient C: <label class='clientMoodStatus'>{{clientsMood.clientC}}</label>\n\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t</v-layout>\n\t\t\t\t\t</v-toolbar>\n\t\t\t\t</v-flex>\n\t\t\t\t<v-flex>\n\t\t\t\t\t<flip-countdown :deadline=\"countDown\"></flip-countdown>\n\t\t\t\t</v-flex>\n\t\t\t</v-layout>\n\t\t</template>\n\t</v-container>\n</template>\n\n<script>\nimport moment from 'moment'\nimport { eventBus } from \"../../main\";\nimport { module1 } from \"../modules/module1.js\";\nimport FlipCountdown from 'vue2-flip-countdown'\nexport default {\n  data () {\n    return {\n\t\t\tgameDuration: 20,\n\t\t\tcountDown: '',\n      question: \"\",\n      choices: [],\n      gameRunning: false,\n      nextQuestion: null,\n      prevQuestion: null,\n      client: \"\",\n      questionNumber: 1,\n      selectedChoice: {},\n      selectedIndex: \"\",\n      accummulatedPoints: 0,\n      selectedAnswers: {\n        clientA: {},\n        clientB: {},\n        clientC: {}\n\t\t\t},\n\t\t\tclientsMood: {\n\t\t\t\tclientA: null,\n\t\t\t\tclientB: null,\n\t\t\t\tclientC: null\n\t\t\t},\n\t\t\tloadingNextClient: false,\n\t\t\twaitingPercent: 0,\n      mood: \"interested\",\n      moodClass: \"meter_arrow_interested\",\n      moods: [\"unhappy\", \"unsure\", \"neutral\", \"interested\", \"satisfied\"]\n    };\n\t},\n\tfilters: {\n\t\tformatClient (client) {\n\t\t\tif (!client) {\n\t\t\t\treturn client\n\t\t\t}\n\t\t\tlet cltArr = client.split('client')\n\t\t\tif (cltArr.length === 2) {\n\t\t\t\treturn 'Client ' + cltArr[1]\n\t\t\t}\n\t\t\treturn client\n\t\t}\n\t},\n  methods: {\n    choiceSelected(index) {\n\t\t\t//ensure that an answer is not changed\n      if (this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n        index = this.selectedAnswers[this.client][this.questionNumber - 1];\n\t\t\t}\n      this.selectedChoice = this.choices[index];\n\t\t\tthis.selectedIndex = index;\n\t\t\tthis.$refs[index][0].isActive = true\n      for (let k in this.choices) {\n        k = parseInt(k);\n        if (k === index) {\n          continue;\n\t\t\t\t}\n\t\t\t\tthis.$refs[k][0].isActive = false\n      }\n    },\n    changeMood(marks) {\n      let moodIndex = this.moods.indexOf(this.mood);\n      moodIndex += marks;\n      if (this.moods[moodIndex] === undefined) {\n        if (moodIndex <= 0) {\n          this.mood = \"unhappy\";\n        } else {\n          this.mood = \"satisfied\";\n        }\n      } else {\n        this.mood = this.moods[moodIndex];\n      }\n      if (this.mood === \"satisfied\") {\n\t\t\t\tthis.clientsMood[this.client] = 'Satisfied'\n        this.moodClass = \"meter_arrow_satisfied\";\n      } else if (this.mood === \"interested\") {\n\t\t\t\tthis.clientsMood[this.client] = 'Interested'\n        this.moodClass = \"meter_arrow_interested\";\n      } else if (this.mood === \"neutral\") {\n\t\t\t\tthis.clientsMood[this.client] = 'Neutral'\n        this.moodClass = \"meter_arrow_neutral\";\n      } else if (this.mood === \"unsure\") {\n\t\t\t\tthis.clientsMood[this.client] = 'Unsure'\n        this.moodClass = \"meter_arrow_unsure\";\n      } else if (this.mood === \"unhappy\") {\n\t\t\t\tthis.clientsMood[this.client] = 'Unhappy'\n        this.moodClass = \"meter_arrow_unhappy\";\n      }\n    },\n    checkAnswer() {\n      if (Object.keys(this.selectedChoice).length === 0) {\n        this.$store.state.dialogError = true;\n        this.$store.state.errorTitle = \"Error\";\n        this.$store.state.errorDescription = \"Select an answer to proceed\";\n        return;\n      }\n      if (!this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n        this.selectedAnswers[this.client][this.questionNumber - 1] = this.selectedIndex;\n        let marks = parseInt(this.selectedChoice.impact);\n        this.accummulatedPoints += marks;\n        this.changeMood(marks);\n      }\n      this.selectedChoice = {};\n      this.loadNextQuestion();\n    },\n    loadPrevQuestion() {\n      if (this.prevQuestion === null) {\n        return;\n      }\n      if (this.prevQuestion === \"clientA\" || this.prevQuestion === \"clientB\") {\n        this.client = this.prevQuestion;\n        this.prevQuestion = last(Object.keys(module1[this.client]));\n        this.questionNumber = this.prevQuestion++;\n      } else {\n        this.questionNumber--;\n      }\n      this.question = module1[this.client][this.prevQuestion].situationText;\n      this.choices = module1[this.client][this.prevQuestion].choices;\n      this.nextQuestion = module1[this.client][this.prevQuestion].nextMove;\n      this.prevQuestion = module1[this.client][this.prevQuestion].prevMove;\n      if (\n        this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])\n      ) {\n        this.choiceSelected(this.selectedAnswers[this.client][this.questionNumber - 1]);\n      }\n    },\n    loadNextQuestion() {\n      if (!this.gameRunning || this.nextQuestion === \"clientB\" || this.nextQuestion === \"clientC\") {\n        this.questionNumber = 1;\n        if (!this.gameRunning) {\n          this.client = \"clientA\";\n          this.gameRunning = true;\n        } else {\n\t\t\t\t\tthis.client = this.nextQuestion;\n\t\t\t\t\tthis.mood = 'interested'\n\t\t\t\t\tthis.loadingNextClient = true\n\t\t\t\t\tlet intervalObj = setInterval (()=>{\n\t\t\t\t\t\tconsole.log (this.waitingPercent)\n\t\t\t\t\t\tthis.waitingPercent++\n\t\t\t\t\t\tif (this.waitingPercent === 100) {\n\t\t\t\t\t\t\tthis.loadingNextClient = false\n\t\t\t\t\t\t\tthis.changeMood(0);\n\t\t\t\t\t\t\tclearInterval(intervalObj)\n\t\t\t\t\t\t\tthis.waitingPercent = 0\n\t\t\t\t\t\t}\n\t\t\t\t\t},100)\n\t\t\t\t}\n\t\t\t\tthis.clientsMood[this.client] = 'Interested'\n\t\t\t\tthis.nextQuestion = 0;\n      } else {\n        this.questionNumber++;\n      }\n\n      if (this.nextQuestion === null) {\n        this.$store.state.moduleProgress.completed = true;\n        this.$store.state.moduleProgress.module = 1;\n        this.prevQuestion = module1[this.client][this.nextQuestion].prevMove;\n      } else if (module1[this.client].hasOwnProperty(this.nextQuestion)) {\n        this.question = module1[this.client][this.nextQuestion].situationText;\n        this.choices = module1[this.client][this.nextQuestion].choices;\n        this.prevQuestion = module1[this.client][this.nextQuestion].prevMove;\n        this.nextQuestion = module1[this.client][this.nextQuestion].nextMove;\n      }\n\n      // if an answer exist then highligh the answer\n      if (\n        this.selectedAnswers[this.client].hasOwnProperty([\n          this.questionNumber - 1\n        ])\n      ) {\n        this.choiceSelected(this.selectedAnswers[this.client][this.questionNumber - 1]);\n      }\n      for (let k in this.choices) {\n        k = parseInt(k);\n        if (this.$refs[k] === undefined || this.selectedAnswers[this.client][this.questionNumber - 1] === k) {\n          continue;\n        }\n        this.$refs[k][0].isActive = false;\n      }\n    }\n  },\n  created: function() {\n\t\tthis.loadNextQuestion();\n\t\tthis.countDown = moment().add(this.gameDuration,'minutes').format('YYYY-MM-DD HH:mm:ss');\n\t},\n\tcomponents: {\n\t\tFlipCountdown\n\t}\n};\n</script>\n\n<style scoped>\n#question {\n  padding: 20px 0px 20px;\n}\n#answer {\n\tpadding: 0px 70px;\n}\n#moduleIntro {\n\tpadding: 20px 0px 0px 0px;\n}\n.choices {\n  cursor: pointer;\n  padding: 10px;\n  border-radius: 20px;\n  margin: 10px;\n  background-color: #7ce5f8;\n  text-align: left;\n}\n.choices:hover {\n  background-color: #3ead68;\n  color: white;\n}\n.selectedChoice {\n  background-color: #3ead68;\n  cursor: pointer;\n  padding: 10px;\n  border-radius: 20px;\n  margin: 10px;\n  color: white;\n  text-align: left;\n}\n.clientMoodStatus {\n  font-weight: bold;\n}\n.scroll {\n  overflow-y: auto;\n}\n.meter_box {\n  position: relative;\n  background-image: url(\"../../assets/images/meter_box.png\");\n  width: 1000;\n  height: 800;\n  right: 100px;\n}\n.meter_arrow {\n  display: inline-block;\n  position: relative;\n  background: url(\"../../assets/images/meter_arrow.png\") no-repeat;\n}\n.meter_arrow_satisfied {\n  bottom: -30px;\n  left: 90px;\n  transform: rotate(38deg);\n}\n.meter_arrow_interested {\n  bottom: 90px;\n  left: 100px;\n  transform: rotate(-5deg);\n}\n.meter_arrow_neutral {\n  bottom: 200px;\n  left: 24px;\n  transform: rotate(-49deg);\n}\n.meter_arrow_unsure {\n  bottom: 234px;\n  left: -117px;\n  transform: rotate(-103deg);\n}\n.meter_arrow_unhappy {\n  bottom: 170px;\n  left: -230px;\n  transform: rotate(-138deg);\n}\n</style>\n"],"sourceRoot":"src/components/Game"}]}
{"remainingRequest":"/home/ashaban/vmmc/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ashaban/vmmc/src/components/Game/Module1.vue?vue&type=style&index=0&id=6a4cc804&scoped=true&lang=css&","dependencies":[{"path":"/home/ashaban/vmmc/src/components/Game/Module1.vue","mtime":1538115366728},{"path":"/home/ashaban/vmmc/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/ashaban/vmmc/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/ashaban/vmmc/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/home/ashaban/vmmc/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/ashaban/vmmc/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#question {\n  padding: 20px 0px 20px;\n}\n#answer {\n\tpadding: 0px 70px;\n}\n.choices {\n  cursor: pointer;\n  padding: 10px;\n  border-radius: 20px;\n  margin: 10px;\n  background-color: #7ce5f8;\n  text-align: left;\n}\n.choices:hover {\n  background-color: #3ead68;\n  color: white;\n}\n.selectedChoice {\n  background-color: #3ead68;\n  cursor: pointer;\n  padding: 10px;\n  border-radius: 20px;\n  margin: 10px;\n  color: white;\n  text-align: left;\n}\n.clientMoodStatus {\n  font-weight: bold;\n}\n.scroll {\n  overflow-y: auto;\n}\n.meter_box {\n  position: relative;\n  background-image: url(\"../../assets/images/meter_box.png\");\n  width: 1000;\n  height: 800;\n  right: 100px;\n}\n.meter_arrow {\n  display: inline-block;\n  position: relative;\n  background: url(\"../../assets/images/meter_arrow.png\") no-repeat;\n}\n.meter_arrow_satisfied {\n  bottom: -30px;\n  left: 90px;\n  transform: rotate(38deg);\n}\n.meter_arrow_interested {\n  bottom: 90px;\n  left: 100px;\n  transform: rotate(-5deg);\n}\n.meter_arrow_neutral {\n  bottom: 200px;\n  left: 24px;\n  transform: rotate(-49deg);\n}\n.meter_arrow_unsure {\n  bottom: 234px;\n  left: -117px;\n  transform: rotate(-103deg);\n}\n.meter_arrow_unhappy {\n  bottom: 170px;\n  left: -230px;\n  transform: rotate(-138deg);\n}\n",{"version":3,"sources":["Module1.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Module1.vue","sourceRoot":"src/components/Game","sourcesContent":["<template>\n\t<v-container>\n    <v-dialog persistent v-model=\"commentDialog\" max-width=\"500px\">\n\t\t\t<v-card>\n\t\t\t\t<v-toolbar color=\"primary\" dark>\n\t\t\t\t\t<v-toolbar-title>\n\t\t\t\t\t\tComment\n\t\t\t\t\t</v-toolbar-title>\n\t\t\t\t</v-toolbar>\n\t\t\t\t<v-card-text>\n\t\t\t\t\t{{comment}}\n\t\t\t\t</v-card-text>\n\t\t\t\t<v-card-actions>\n\t\t\t\t\t<v-btn color=\"primary\" @click.native=\"commentDialog = false\">Ok</v-btn>\n\t\t\t\t</v-card-actions>\n\t\t\t</v-card>\n\t\t</v-dialog>\n    <v-alert type=\"info\" :value=\"true\" v-if=\"$store.state.moduleProgress.one.status === 'done'\">\n      <b>Congratulations</b>\n      <p>\n        You have Completed Module 1\n      </p>\n    </v-alert>\n\t\t<template>\n\t\t\t<v-layout column>\n\t\t\t\t<v-flex>\n\t\t\t\t\t<v-toolbar color=\"#566573\">\n\t\t\t\t\t\t<v-layout row wrap>\n\t\t\t\t\t\t\t<v-flex xs4 text-sm-left style=\"color:white\">\n\t\t\t\t\t\t\t\t<b>MALE CIRCUMCISION CHALLENGE</b>\n\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t<v-spacer></v-spacer>\n\t\t\t\t\t\t\t<v-flex xs1 text-sm-right style=\"color:white\">\n\t\t\t\t\t\t\t\t<b>MODULE 1</b>\n\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t</v-layout>\n\t\t\t\t\t</v-toolbar>\n\t\t\t\t</v-flex>\n\t\t\t\t<v-flex id=\"question\" v-show='loadingNextClient'>\n\t\t\t\t\t{{client | formatClient}} Coming Now<v-progress-linear v-model=\"waitingPercent\" color=\"primary\" class=\"mb-0\"></v-progress-linear>\n\t\t\t\t</v-flex>\n\t\t\t\t<v-flex id=\"question\" height=\"1\" v-show='!loadingNextClient' text-sm-left>\n\t\t\t\t\t<b>{{client | formatClient}}</b>\n\t\t\t\t\t<v-card class=\"scroll\" height=\"200\">\n\t\t\t\t\t\t<v-card-text>\n\t\t\t\t\t\t\t<v-layout column>\n\t\t\t\t\t\t\t\t<v-flex>\n\t\t\t\t\t\t\t\t\t<v-layout>\n\t\t\t\t\t\t\t\t\t\t<v-flex xs1>\n\t\t\t\t\t\t\t\t\t\t\t{{questionNumber}}\n\t\t\t\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t\t\t\t<v-flex xs11 style=\"text-align:left\">\n\t\t\t\t\t\t\t\t\t\t\t{{question}}\n\t\t\t\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t\t\t</v-layout>\n\t\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t\t<v-flex>\n\t\t\t\t\t\t\t\t\t<div id=\"answer\">\n\t\t\t\t\t\t\t\t\t\t<v-layout column>\n\t\t\t\t\t\t\t\t\t\t\t<template v-for=\"(choice,index) in choices\">\n\t\t\t\t\t\t\t\t\t\t\t\t<v-radio-group v-model=\"selectedIndex\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<label style=\"cursor: pointer;\" @click=\"choiceSelected($event, index)\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<v-radio :key=\"index\" :ref='index' :value=\"index\" style=\"font-weight: bold;color: black\" :label=\"choice.choiceText\" color=\"red\"></v-radio>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t</v-radio-group>\n\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t</v-layout>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t\t</v-layout>\n\t\t\t\t\t\t</v-card-text>\n\t\t\t\t\t</v-card>\n\t\t\t\t</v-flex>\n\t\t\t</v-layout>\n\t\t\t<br><br>\n\t\t\t<v-layout row wrap>\n\t\t\t\t<v-flex height=\"500px\" style=\"background-color: white\">\n\t\t\t\t\t<v-layout row>\n\t\t\t\t\t\t<v-flex xs4 text-sm-left style=\"margin-top:140px\">\n              <label @click=\"loadPrevQuestion()\" style=\"cursor:pointer\">\n                <img src=\"../../assets/images/prev.png\">\n                BACK\n              </label>\n\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t<v-flex xs4>\n\t\t\t\t\t\t\t<div class=\"meter_box\" style=\"height:170px;width:450px\"></div>\n\t\t\t\t\t\t\t<div :class=\"[moodClass, 'meter_arrow']\" style=\"height:85px;width:400px\"></div>\n\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t\t<v-flex xs4 text-sm-right style=\"margin-top:140px\">\n              <label @click=\"checkAnswer()\" style=\"cursor:pointer\">\n                NEXT<img src=\"../../assets/images/next.png\">\n              </label>\n\t\t\t\t\t\t</v-flex>\n\t\t\t\t\t</v-layout>\n\t\t\t\t</v-flex>\n\t\t\t</v-layout>\n\t\t</template>\n    <v-layout column>\n      <v-flex>\n        <v-toolbar color=\"primary\">\n          <v-layout row wrap>\n            <v-flex xs3 style=\"color: white\" text-sm-left v-if=\"clientsStatus.clientA === 'done'\">\n              Client A: <label class='clientMoodStatus'>{{$store.state.mod1ClientsMood.clientA}}</label>\n            </v-flex>\n            <v-flex xs3 style=\"color: white\" text-xs-center v-if=\"clientsStatus.clientB === 'done'\">\n              Client B: <label class='clientMoodStatus'>{{$store.state.mod1ClientsMood.clientB}}</label>\n            </v-flex>\n            <v-flex xs3 style=\"color: white\" text-sm-right v-if=\"clientsStatus.clientC === 'done'\">\n              Client C: <label class='clientMoodStatus'>{{$store.state.mod1ClientsMood.clientC}}</label>\n            </v-flex>\n            <v-flex xs3 style=\"position: absolute; right: 0; bottom: 10px\">\n              <v-btn to='/'><v-icon left>home</v-icon>Home</v-btn>\n            </v-flex>\n          </v-layout>\n        </v-toolbar>\n      </v-flex>\n    </v-layout>\n\t</v-container>\n</template>\n\n<script>\nimport { eventBus } from '../../main'\nimport { module1 } from '../questions/module1.js'\nexport default {\n\tdata () {\n\t\treturn {\n\t\t\tquestion: '',\n\t\t\tcomment: '',\n\t\t\tcommentDialog: false,\n\t\t\tchoices: [],\n\t\t\tgameRunning: false,\n\t\t\tnextQuestion: null,\n\t\t\tprevQuestion: null,\n\t\t\tclient: '',\n\t\t\tquestionNumber: 1,\n\t\t\tselectedChoice: {},\n\t\t\tselectedIndex: '',\n\t\t\taccummulatedPoints: 0,\n\t\t\tselectedAnswers: {\n\t\t\t\tclientA: {},\n\t\t\t\tclientB: {},\n\t\t\t\tclientC: {}\n\t\t\t},\n\t\t\tclientsStatus: {\n\t\t\t\tclientA: 'pending',\n\t\t\t\tclientB: 'pending',\n\t\t\t\tclientC: 'pending'\n\t\t\t},\n\t\t\tloadingNextClient: false,\n\t\t\twaitingPercent: 0,\n\t\t\tmood: 'interested',\n\t\t\tmoodClass: 'meter_arrow_interested',\n\t\t\tmoods: ['unhappy', 'unsure', 'neutral', 'interested', 'satisfied']\n\t\t}\n\t},\n\tfilters: {\n\t\tformatClient (client) {\n\t\t\tif (!client) {\n\t\t\t\treturn client\n\t\t\t}\n\t\t\tlet cltArr = client.split('client')\n\t\t\tif (cltArr.length === 2) {\n\t\t\t\treturn 'Client ' + cltArr[1]\n\t\t\t}\n\t\t\treturn client\n\t\t}\n\t},\n\tmethods: {\n\t\tchoiceSelected (event, index) {\n\t\t\t// ensure that an answer is not changed\n\t\t\tif (this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n\t\t\t\tindex = this.selectedAnswers[this.client][this.questionNumber - 1]\n\t\t\t}\n\t\t\tthis.selectedChoice = this.choices[index]\n\t\t\tthis.selectedIndex = index\n\t\t\tfor (let k in this.choices) {\n\t\t\t\tk = parseInt(k)\n\t\t\t\tif (k === index) {\n\t\t\t\t\t// wait for the vuetify oncahnge event to be called first then reset\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.$refs[k][0].isActive = true\n\t\t\t\t\t}, 0)\n\t\t\t\t} else {\n\t\t\t\t\t// wait for the vuetify oncahnge event to be called first then reset\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.$refs[k][0].isActive = false\n\t\t\t\t\t}, 0)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tchangeMood (marks) {\n\t\t\tlet moodIndex = this.moods.indexOf(this.mood)\n\t\t\tmoodIndex += marks\n\t\t\tif (this.moods[moodIndex] === undefined) {\n\t\t\t\tif (moodIndex <= 0) {\n\t\t\t\t\tthis.mood = 'unhappy'\n\t\t\t\t} else {\n\t\t\t\t\tthis.mood = 'satisfied'\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.mood = this.moods[moodIndex]\n\t\t\t}\n\t\t\tif (this.mood === 'satisfied') {\n\t\t\t\tthis.$store.state.mod1ClientsMood[this.client] = 'Satisfied'\n\t\t\t\tthis.moodClass = 'meter_arrow_satisfied'\n\t\t\t} else if (this.mood === 'interested') {\n\t\t\t\tthis.$store.state.mod1ClientsMood[this.client] = 'Interested'\n\t\t\t\tthis.moodClass = 'meter_arrow_interested'\n\t\t\t} else if (this.mood === 'neutral') {\n\t\t\t\tthis.$store.state.mod1ClientsMood[this.client] = 'Neutral'\n\t\t\t\tthis.moodClass = 'meter_arrow_neutral'\n\t\t\t} else if (this.mood === 'unsure') {\n\t\t\t\tthis.$store.state.mod1ClientsMood[this.client] = 'Unsure'\n\t\t\t\tthis.moodClass = 'meter_arrow_unsure'\n\t\t\t} else if (this.mood === 'unhappy') {\n\t\t\t\tthis.$store.state.mod1ClientsMood[this.client] = 'Unhappy'\n\t\t\t\tthis.moodClass = 'meter_arrow_unhappy'\n\t\t\t}\n\t\t},\n\t\tcheckAnswer () {\n\t\t\tif (Object.keys(this.selectedChoice).length === 0) {\n\t\t\t\tthis.$store.state.dialogError = true\n\t\t\t\tthis.$store.state.errorTitle = 'Error'\n\t\t\t\tthis.$store.state.errorDescription = 'Select an answer to proceed'\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (!this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n\t\t\t\t// make sure player see meter movement before displaying dialog\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.commentDialog = true\n\t\t\t\t}, 250)\n\t\t\t\tthis.comment = this.selectedChoice.comment\n\t\t\t\tthis.selectedAnswers[this.client][this.questionNumber - 1] = this.selectedIndex\n\t\t\t\tlet marks = parseInt(this.selectedChoice.impact)\n\t\t\t\tthis.accummulatedPoints += marks\n\t\t\t\tthis.changeMood(marks)\n\t\t\t}\n\t\t\tthis.selectedChoice = {}\n\t\t\tthis.loadNextQuestion()\n\t\t},\n\t\tloadPrevQuestion () {\n\t\t\tif (this.prevQuestion === null) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (this.prevQuestion === 'clientA' || this.prevQuestion === 'clientB') {\n\t\t\t\tthis.client = this.prevQuestion\n\t\t\t\tthis.prevQuestion = last(Object.keys(module1[this.client]))\n\t\t\t\tthis.questionNumber = this.prevQuestion++\n\t\t\t} else {\n\t\t\t\tthis.questionNumber--\n\t\t\t}\n\t\t\tthis.question = module1[this.client][this.prevQuestion].situationText\n\t\t\tthis.choices = module1[this.client][this.prevQuestion].choices\n\t\t\tthis.nextQuestion = module1[this.client][this.prevQuestion].nextMove\n\t\t\tthis.prevQuestion = module1[this.client][this.prevQuestion].prevMove\n\t\t\tif (\n\t\t\t\tthis.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])\n\t\t\t) {\n\t\t\t\tthis.choiceSelected(this.selectedAnswers[this.client][this.questionNumber - 1])\n\t\t\t}\n\t\t},\n\t\tloadNextQuestion () {\n\t\t\tif (!this.gameRunning || this.nextQuestion === 'clientB' || this.nextQuestion === 'clientC') {\n\t\t\t\tthis.questionNumber = 1\n\t\t\t\tif (!this.gameRunning) {\n\t\t\t\t\tthis.client = 'clientA'\n\t\t\t\t\tthis.$store.state.moduleProgress.one.status = 'on-progress'\n\t\t\t\t\tthis.gameRunning = true\n\t\t\t\t} else {\n\t\t\t\t\tthis.client = this.nextQuestion\n\t\t\t\t\tif (this.client === 'clientB') {\n\t\t\t\t\t\tthis.clientsStatus.clientA = 'done'\n\t\t\t\t\t} else if (this.client === 'clientC') {\n\t\t\t\t\t\tthis.clientsStatus.clientB = 'done'\n\t\t\t\t\t}\n\t\t\t\t\tthis.mood = 'interested'\n\t\t\t\t\tthis.loadingNextClient = true\n\t\t\t\t\tlet intervalObj = setInterval(() => {\n\t\t\t\t\t\tthis.waitingPercent++\n\t\t\t\t\t\tif (this.waitingPercent === 100) {\n\t\t\t\t\t\t\tthis.loadingNextClient = false\n\t\t\t\t\t\t\tthis.changeMood(0)\n\t\t\t\t\t\t\tclearInterval(intervalObj)\n\t\t\t\t\t\t\tthis.waitingPercent = 0\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 100)\n\t\t\t\t}\n\t\t\t\tthis.$store.state.mod1ClientsMood[this.client] = 'Interested'\n\t\t\t\tthis.nextQuestion = 0\n\t\t\t} else {\n\t\t\t\tthis.questionNumber++\n\t\t\t}\n\n\t\t\tif (this.nextQuestion === null) {\n\t\t\t\tthis.clientsStatus.clientC = 'done'\n\t\t\t\tthis.$store.state.moduleProgress.one.status = 'done'\n\t\t\t\tthis.questionNumber--\n\t\t\t\tthis.gameRunning = false\n\t\t\t\t// this.prevQuestion = module1[this.client][this.nextQuestion].prevMove;\n\t\t\t} else if (module1[this.client].hasOwnProperty(this.nextQuestion)) {\n\t\t\t\tthis.question = module1[this.client][this.nextQuestion].situationText\n\t\t\t\tthis.choices = module1[this.client][this.nextQuestion].choices\n\t\t\t\tthis.prevQuestion = module1[this.client][this.nextQuestion].prevMove\n\t\t\t\tthis.nextQuestion = module1[this.client][this.nextQuestion].nextMove\n\t\t\t}\n\n\t\t\t// if an answer exist then highligh the answer\n\t\t\tif (this.selectedAnswers[this.client].hasOwnProperty([this.questionNumber - 1])) {\n\t\t\t\tthis.choiceSelected(this.selectedAnswers[this.client][this.questionNumber - 1])\n\t\t\t}\n\t\t\tfor (let k in this.choices) {\n\t\t\t\tk = parseInt(k)\n\t\t\t\tif (this.$refs[k] === undefined || this.selectedAnswers[this.client][this.questionNumber - 1] === k) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tthis.$refs[k][0].isActive = false\n\t\t\t}\n\t\t}\n\t},\n\tcreated: function () {\n\t\tthis.loadNextQuestion()\n\t}\n}\n</script>\n\n<style scoped>\n#question {\n  padding: 20px 0px 20px;\n}\n#answer {\n\tpadding: 0px 70px;\n}\n.choices {\n  cursor: pointer;\n  padding: 10px;\n  border-radius: 20px;\n  margin: 10px;\n  background-color: #7ce5f8;\n  text-align: left;\n}\n.choices:hover {\n  background-color: #3ead68;\n  color: white;\n}\n.selectedChoice {\n  background-color: #3ead68;\n  cursor: pointer;\n  padding: 10px;\n  border-radius: 20px;\n  margin: 10px;\n  color: white;\n  text-align: left;\n}\n.clientMoodStatus {\n  font-weight: bold;\n}\n.scroll {\n  overflow-y: auto;\n}\n.meter_box {\n  position: relative;\n  background-image: url(\"../../assets/images/meter_box.png\");\n  width: 1000;\n  height: 800;\n  right: 100px;\n}\n.meter_arrow {\n  display: inline-block;\n  position: relative;\n  background: url(\"../../assets/images/meter_arrow.png\") no-repeat;\n}\n.meter_arrow_satisfied {\n  bottom: -30px;\n  left: 90px;\n  transform: rotate(38deg);\n}\n.meter_arrow_interested {\n  bottom: 90px;\n  left: 100px;\n  transform: rotate(-5deg);\n}\n.meter_arrow_neutral {\n  bottom: 200px;\n  left: 24px;\n  transform: rotate(-49deg);\n}\n.meter_arrow_unsure {\n  bottom: 234px;\n  left: -117px;\n  transform: rotate(-103deg);\n}\n.meter_arrow_unhappy {\n  bottom: 170px;\n  left: -230px;\n  transform: rotate(-138deg);\n}\n</style>\n"]}]}